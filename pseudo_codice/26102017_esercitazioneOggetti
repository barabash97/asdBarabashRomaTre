############################################################################
/* 
l è una lista semplicemente concatenata realizzata con oggetti e puntatori.
Esco con un errore se la lista è vuota 
*/
MASSIMO(l) 
	x = l.head // Alternativa, i = FIRST(l)
	if(x != NULL)
		max = i.info
	while(x != NULL)
		if x.info > max
			max = x.info
		x = x.next
	return max

Scorrendo la lista -> c'è sempre un iteratore
############################################################################
############################################################################

SOMMA(l)
    somma = 0
    x = l.head
    while(x != NULL)
        somma += x.info
        x = x.next
    return somma

############################################################################
############################################################################

SEARCH(l, u)
    x = l.head
    while(x != NULL)
        if(x.info == u)
            return x
        x = x.next
    return NULL


############################################################################
############################################################################

PREV(l, i)
    x = l.head
    while(x.next != NULL)
        if(x.next == i)
            return x
        x = x.next
    return NULL

############################################################################
############################################################################

DELETE(l, i)
    x = l.head
    
    if(x == i)
        l.head = x.next
        return
    while(x != NULL)
        if(x.next == i)
            x.next = x.next.next
            return x
        x = x.next
    l.head = x.head
    return l
############################################################################
############################################################################

DELETE(l, u) /* l è una lista non vuota */
    x = l.head //x != NULL perché la lista non è vuota

    if(x.info == u)
        l.head = x.next
        return
    prev = x
    x = x.next

    while(x != NULL)
        if(x.info == u)
            prev.next = x.next
            return
        x = x.next //Incremento 

        prev = prev.next


############################################################################
############################################################################

IS_EMPTY(l)
    return l.head == NULL

############################################################################
############################################################################

PUSH(l,u)
    x.info = un
    x.next = l.head
    l.head = x

############################################################################
############################################################################

POP(l){
    if IS_EMPTY(l)
        errore("POP su stack vuoto")
    output = l.head.info //out nuovo intero
    l.head l.head.next
    return output
}

############################################################################
############################################################################

NEW_QUEUE() // Uguale alla funzione NEW_STACK()

############################################################################
############################################################################

DEQUEUE(l) // Uguale alla funzione POP(l)

############################################################################
############################################################################

ENQUEUE(l, u)
    /* x nuovo elemento della lista */
    x.info = u
    x.next = NULL
    if(l.head == NULL)
        l.head = x
        return
    y = l.head
    

############################################################################
############################################################################

